@page "/"
@using Templahoot.Code
@inject AttendeeService AttendeeService
@inject CircuitTracker CircuitTracker
@inject QuizInfo Quiz
@implements IDisposable

<div class="flex flex-col gap-4">

    @if (!AttendeeService.IsNameSet)
    {
        <div class="flex flex-col gap-2">
            <label for="name">Enter your name:</label>
            <input id="name" type="text" class="bg-slate-700 border-2 border-slate-900 px-4 py-1 rounded-sm" @bind-value="@ProposedName" @onkeyup="OnKeyUp"/>
            <button class="bg-slate-300 p-2 rounded-lg text-slate-800 text-lg hover:bg-slate-200 active:bg-slate-400" @onclick="OnSetNameClick">Set</button>
        </div>
    }

    @if (CurrentQuestion is not null)
    {
        var answeredAnswer = CircuitTracker.GetAnsweredAnswer(AttendeeService.CircuitId);

        <h3 class="font-mono text-lg text-center text-slate-200 bg-slate-900 rounded-md p-4">@((MarkupString)CurrentQuestion.Text)</h3>

        <ul class="grid md:grid-cols-2 grid-cols-1 gap-2">

            @foreach (var answer in CurrentQuestion.Answers)
            {
                var currentAnswer = answer;

                var extraStyle = "";

                if (CircuitTracker.QuestionTimeOut is null && answer.CorrectAnswer)
                {
                    extraStyle = "bg-sky-300 opacity-100 scale-105";
                }

                if (answeredAnswer == answer)
                {
                    extraStyle = "bg-sky-300 text-slate-700 opacity-100 scale-105";

                    if (CircuitTracker.QuestionTimeOut is null)
                    {
                        if (answer.CorrectAnswer)
                        {
                            extraStyle = "bg-green-500 opacity-100 scale-105 border-green-900";
                        }
                        else
                        {
                            extraStyle = "bg-red-500 opacity-100 border-red-900 scale-100";
                        }
                    }
                }

                <li class=@("flex items-center justify-center text-2xl grow bg-sky-500 h-16 border-4 border-sky-900 rounded-2xl opacity-80 hover:opacity-100 hover:scale-105 duration-100 cursor-pointer " + extraStyle) @onclick=@(() => OnAnswerClicked(currentAnswer))>@answer.Text</li>
            }
        </ul>
    }

    <div class="flex flex-row justify-between py-6">
        <a class="p-2 hover:cursor-pointer hover:bg-slate-200 rounded-lg" @onclick="() => OnReact(ReactionType.Heart)">
            <img src="/images/heart.png"/>
        </a>
        <a class="p-2 hover:cursor-pointer hover:bg-slate-200 rounded-lg" @onclick="() => OnReact(ReactionType.Joy)">
            <img src="/images/joy.png"/>
        </a>
        <a class="p-2 hover:cursor-pointer hover:bg-slate-200 rounded-lg" @onclick="() => OnReact(ReactionType.Explode)">
            <img src="/images/explode.png"/>
        </a>
        <a class="p-2 hover:cursor-pointer hover:bg-slate-200 rounded-lg" @onclick="() => OnReact(ReactionType.Think)">
            <img src="/images/think.png"/>
        </a>
        <a class="p-2 hover:cursor-pointer hover:bg-slate-200 rounded-lg" @onclick="() => OnReact(ReactionType.Invader)">
            <img src="/images/invader.png"/>
        </a>
    </div>

    @if (CircuitTracker.QuestionTimeOut is null)
    {
        <p class="text-2xl text-center text-slate-100">You have @CircuitTracker.GetPoints(AttendeeService.CircuitId) points.</p>
    }

    <p class="text-lg text-center text-slate-300">Attending as @AttendeeService.Name</p>

    @code {
        private string ProposedName { get; set; }
        private QuestionInfo? CurrentQuestion => CircuitTracker.CurrentQuestion;

        private async Task OnReact(ReactionType reactionType)
        {
            await CircuitTracker.PostCommand(new CircuitReact(AttendeeService.CircuitId, reactionType));
        }

        protected override void OnInitialized()
        {
            CircuitTracker.OnClientChange += OnClientChange;
        }

        private async Task OnClientChange(string? circuitId)
        {
            if (circuitId == null || circuitId == AttendeeService.CircuitId)
            {
                await InvokeAsync(StateHasChanged);
            }
        }

        public void Dispose()
        {
            CircuitTracker.OnClientChange -= OnClientChange;
        }

        private async Task OnAnswerClicked(AnswerInfo answer)
        {
            await CircuitTracker.PostCommand(new AnswerSubmitted(AttendeeService.CircuitId, answer));
        }

        private async Task OnKeyUp(KeyboardEventArgs arg)
        {
            if (arg.Key == "Enter")
            {
                await SetName(ProposedName);
            }
        }

        private async Task OnSetNameClick()
        {
            await SetName(ProposedName);
        }

        private async Task SetName(string? proposedName)
        {
            proposedName = proposedName?.Trim() ?? "";

            if (proposedName.Length < 3)
            {
                return;
            }

            AttendeeService.Name = proposedName;
            AttendeeService.IsNameSet = true;
            await CircuitTracker.PostCommand(new NameSet(AttendeeService.CircuitId, proposedName));
        }

    }

</div>