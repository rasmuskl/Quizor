@page "/host"
@inject CircuitTracker CircuitTracker
@using Templahoot.Code
@implements IDisposable

<div class="fixed bottom-4 left-4 w-32">
    <p class="text-md text-slate-300">Join</p>
    <img src="/images/qr-code.svg"/>
</div>

<div class="grid grid-flow-row-dense grid-cols-4 gap-8">
    <div class="col-span-1 flex flex-col gap-6">
        <div class="flex flex-col gap-1 rounded-md border border-slate-500 p-4">
            <h3 class="text-xl text-slate-300">Leaderboard</h3>
            @foreach (var (_, circuit) in CircuitTracker.Circuits.ToArray().OrderByDescending(x => x.Value.Points))
            {
                <div class="text-lg text-slate-200">@circuit.Name @(CircuitTracker.QuestionReveal ? @$"- {circuit.Points}" : "")</div>
            }
        </div>

        <div class="flex flex-col gap-1 rounded-md border border-slate-500 p-4">
            <h3 class="text-xl text-slate-300">Reactions</h3>
            @foreach (var reaction in CircuitTracker.Reactions.ToArray())
            {
                <div class="text-lg text-slate-200">@reaction.Name: <img src="@GetImage(reaction.Type)"/></div>
            }
        </div>
        
    </div>
    <div class="col-span-3 flex flex-col gap-4">

        @if (CircuitTracker.CurrentQuestion is null)
        {
            <h2 class="text-2xl text-center text-slate-100">No quiz active.</h2>
            <button class="bg-slate-300 p-2 rounded-md text-slate-800 text-lg hover:bg-slate-200 active:bg-slate-400" @onclick="OnStartQuiz">Start quiz</button>
        }
        else
        {
            <h3 class="text-2xl text-center text-slate-100 p-4 rounded-md border-4 border-slate-200">@CircuitTracker.CurrentQuestion.Text</h3>
            <ul class="space-4 grid md:grid-cols-2 grid-cols-1 gap-4">

                @foreach (var answer in CircuitTracker.CurrentQuestion.Answers)
                {
                    var extraStyle = CircuitTracker.QuestionReveal && answer.CorrectAnswer ? "bg-green-500 opacity-100 scale-105 border-green-900" : "";
                    <li class=@("flex items-center justify-center text-2xl grow bg-sky-500 h-24 border-4 border-sky-900 rounded-2xl opacity-80 hover:opacity-100 hover:scale-105 duration-100 cursor-pointer " + extraStyle)>@answer.Text</li>
                }
            </ul>

            @if (CircuitTracker.QuestionTimeOut.HasValue)
            {
                <p class="text-center text-6xl text-rose-400">@Math.Round((CircuitTracker.QuestionTimeOut - DateTime.UtcNow).Value.TotalSeconds)</p>
            }
            else
            {
                <button class="bg-slate-300 p-2 rounded-md text-slate-800 text-lg hover:bg-slate-200 active:bg-slate-400" @onclick="OnNextQuestion">Next question</button>
            }
        }
    </div>

    @code {

        protected override void OnInitialized()
        {
            CircuitTracker.OnHostChange += OnHostChange;
        }

        private async Task OnHostChange()
        {
            await InvokeAsync(StateHasChanged);
        }

        public void Dispose()
        {
            CircuitTracker.OnHostChange -= OnHostChange;
        }

        private async Task OnStartQuiz()
        {
            await CircuitTracker.PostCommand(new StartQuiz());
        }

        private async Task OnNextQuestion()
        {
            await CircuitTracker.PostCommand(new NextQuestion());
        }


        private string GetImage(ReactionType reactionType)
        {
            return reactionType switch
            {
                ReactionType.Heart => "/images/heart.png",
                ReactionType.Joy => "/images/joy.png",
                ReactionType.Explode => "/images/explode.png",
                ReactionType.Think => "/images/think.png",
                ReactionType.Invader => "/images/invader.png",
                };
        }

    }

</div>